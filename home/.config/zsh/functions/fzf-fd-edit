# vim: filetype=zsh

# This script uses fd and fzf to find and edit files.
# fd is a simple, fast and user-friendly alternative to find.
# fzf is a general-purpose command-line fuzzy finder.

# Exit if any command fails
set -o pipefail

# Print each command before executing it if DEBUG is set
if [[ -n "$DEBUG" ]]; then
  set -x
fi

# fail function: print an error message to stderr and exit with an error code
fail() {
  printf '%s\n' "$1" >&2  # Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2-1}"  # Return a code specified by $2 or 1 by default.
}

# has function: check if a command is available
has() {
  which "$@" > /dev/null 2>&1
}

# Check if ripgrep is installed
if ! has fd; then
  fail "Can't find fd - install fd-find and try again."
fi

# Check if fzf is installed
if ! has fzf; then
  fail "Can't find fzf - install fzf and try again."
fi

# If bat is installed, use bat for file previews
if has bat; then
  fd-find-edit() {
    # Use fd to find files and fzf to select one
    # If a file is selected, open it in the default editor
    file=$(
      fd --hidden --follow --exclude .git . "$1" | fzf --query="$1" --no-multi --select-1 --exit-0 \
        --preview 'bat --color=always --line-range :500 {}'
      )
    if [[ -n "$file" ]]; then
      $EDITOR "$file"
    fi
  }
else
  # If bat is not installed, use head for file previews
  fd-find-edit() {
    file=$(
      fd --hidden --follow --exclude .git . "$1" | fzf --query="$1" --no-multi --select-1 --exit-0 \
        --preview 'less -N -S -R -+F -+X -M {}' # --preview 'head -100 {}'
      )
    if [[ -n "$file" ]]; then
      $EDITOR "$file"
    fi
  }
fi

# Check for help flag
if [[ $1 == "--help" ]]; then
  echo "Usage: ./fd-find-edit.sh [search query]"
  echo "Search for files containing [search query] and open the selected file in your default editor."
  echo "The search is case-insensitive and includes hidden files."
  echo "If bat is installed on your system, it will be used for syntax-highlighted previews; otherwise, head will be used."
else
  # Call the fd-find-edit function with all script arguments
  fd-find-edit "$@"
fi
