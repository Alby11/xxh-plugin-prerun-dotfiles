# vim: filetype=zsh

# Zsh function for interacting with paste.rs
paste_rs() {
    # The first argument is the command (upload, get, delete, or --help)
    local command=$1

    # The second argument is the ID of the paste (for get and delete commands)
    local id=$2

    # The third argument is the optional extension (for get command)
    local ext=$3

    # Ensure the history file exists
    local history_file="$ZDOTDIR/.paste_rs_history"
    touch $history_file

    case $command in
        upload)
            upload_to_paste_rs $id
            ;;
        get)
            get_from_paste_rs $id $ext
            ;;
        delete)
            delete_from_paste_rs $id
            ;;
        --help)
            display_help
            ;;
        *)
            echo "Invalid command. Use 'upload', 'get', 'delete', or '--help'."
            ;;
    esac
}

upload_to_paste_rs() {
    local data=${1:-$(cat)}
    local url=$(echo -n "$data" | curl -X POST --data-binary @- https://paste.rs 2>/dev/null)

    if [[ $? -ne 0 ]]; then
        echo "Failed to upload data to paste.rs"
        return 1
    fi

    echo $url >> $history_file
    echo "Uploaded. URL: $url"

    printf '\nAdd to clipboard? (Y/n): '
    read clip

    if [[ "$clip" =~ ^[Yy]?$ ]]; then
        copy_to_clipboard $url
    fi
}

get_from_paste_rs() {
    local id=$1

    if [[ -z "$id" ]]; then
        echo "You must provide an ID to retrieve a paste."
        return 1
    fi

    local ext=$2

    if [[ -n "$ext" ]]; then
        curl -X GET https://paste.rs/$id.$ext 2>/dev/null || echo "Failed to retrieve paste."
    else
        curl -X GET https://paste.rs/$id 2>/dev/null || echo "Failed to retrieve paste."
    fi
}

delete_from_paste_rs() {
    local id=$1

    if [[ -z "$id" ]]; then
        echo "You must provide an ID to delete a paste."
        return 1
    fi

    curl -X DELETE https://paste.rs/$id 2>/dev/null || echo "Failed to delete paste."
}

display_help() {
    echo "Usage: paste_rs <command> [<id> [<ext>]]"
    echo ""
    echo "Commands:"
    echo "  upload   Upload data to paste.rs. Use 'cat yourfile.txt | paste_rs upload' to upload a file."
    echo "  get      Retrieve a paste by ID with an optional extension. Use 'paste_rs get <id> <ext>' to retrieve a paste."
    echo "  delete   Delete a paste by ID. Use 'paste_rs delete <id>' to delete a paste."
}

copy_to_clipboard() {
    local url=$1

    if command -v wl-copy &> /dev/null; then
        echo $url | wl-copy
        echo "\nURL copied to clipboard."
    elif command -v xclip &> /dev/null; then
        echo $url | xclip -selection clipboard
        echo "\nURL copied to clipboard."
    else
        echo "\nNo clipboard utilities available."
    fi
}

# Autocomplete function for paste_rs
_paste_rs() {
    local -a commands
    commands=(
        'upload:Upload data to paste.rs'
        'get:Retrieve a paste by ID with an optional extension'
        'delete:Delete a paste by ID'
    )

    if (( CURRENT == 2 )); then
        _describe -t commands 'paste.rs command' commands
        return
    fi

    case "$words[2]" in
        get|delete)
            if (( CURRENT == 3 )); then
                # Autocomplete with IDs from the history file
                local -a ids
                ids=("${(@f)$(cut -d'/' -f4 $ZDOTDIR/.paste_rs_history)}")
                _describe -t ids 'paste id' ids
            fi
            ;;
    esac
}

# Register _paste_rs as a completion for paste_rs
compdef _paste_rs paste_rs
