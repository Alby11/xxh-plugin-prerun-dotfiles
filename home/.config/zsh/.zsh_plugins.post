# vim: filetype=zsh

#
# .zsh_plugins.post - post-antidote plugins file
#

ECHOCAT '.zsh_plugins.post - post-antidote plugins file'

antidote_list="$(antidote list)"

string="ohmyzsh/ohmyzsh"
if [[ $antidote_list =~ $string ]]; then
  export ZSH=$(antidote path ohmyzsh/ohmyzsh)
  # space expands all aliases, including global
  bindkey          "^ " globalias
  bindkey -M emacs "^ " globalias
  bindkey -M viins "^ " globalias
  # control-space to make a normal space
  bindkey          " " magic-space
  bindkey -M emacs " " magic-space
  bindkey -M viins " " magic-space
  # normal space during searches
  bindkey -M isearch -r " "
  bindkey -M isearch "^ " magic-space
fi

string="zdharma-continuum/fast-syntax-highlighting"
if [[ $antidote_list =~ $string ]]; then
  local fast_theme="$(antidote path zdharma-continuum/fast-syntax-highlighting)"
  fast_theme="$fast_theme/fast-syntax-highlighting.plugin.zsh"
  [[ -f "$fast_theme" ]] && \
    source "$fast_theme" && \
    fast-theme XDG:catppuccin-mocha > /dev/null 2>&1

  chroma_single_word() {
    (( next_word = 2 | 8192 ))

    local __first_call="$1" __wrd="$2" __start_pos="$3" __end_pos="$4"
    local __style

    (( __first_call )) && { __style=${FAST_THEME_NAME}alias }
    [[ -n "$__style" ]] && (( __start=__start_pos-${#PREBUFFER}, __end=__end_pos-${#PREBUFFER}, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}")

    (( this_word = next_word ))
    _start_pos=$_end_pos

    return 0
  }

  register_single_word_chroma() {
    local word=$1
    if [[ -x $(command -v $word) ]] || [[ -n $FAST_HIGHLIGHT["chroma-$word"] ]]; then
      return 1
    fi

    FAST_HIGHLIGHT+=( "chroma-$word" chroma_single_word )
    return 0
  }
  if command -v abbr &>/dev/null; then
    if [[ -n $FAST_HIGHLIGHT ]]; then
      for abbr in ${(f)"$(abbr list-abbreviations)"}; do
        if [[ $abbr != *' '* ]]; then
          register_single_word_chroma ${(Q)abbr}
        fi
      done
    fi
  fi
fi

string="unixorn/fzf-zsh-plugin"
if [[ $antidote_list =~ $string ]]; then
  export LESSOPEN='| lessfilter-fzf %s'
else
  ECHOCAT "LESSOPEN: lessfilter-fzf in not installed or in PATH
  leaving - $(echo $LESSOPEN) - instead" -i
fi

string="Aloxaf/fzf-tab"
if [[ $antidote_list =~ $string ]]; then
  autoload -Uz enable-fzf-tab
fi

string="mattmc3/zfunctions"
if [[ $antidote_list =~ $string ]]; then
  (( $+functions[funcsave] )) && echo "zfunctions loaded" || echo "zfunctions not loaded"
fi

string="lincheney/fzf-tab-completion"
if [[ $antidote_list =~ $string ]]; then
  # alias -g grep='/bin/grep'
  # SOURCE_RCFILE "$(antidote path lincheney/fzf-tab-completion)/$theShell/\
  #   fzf-$theShell-completion.sh" \
  #   ;
  # bindkey '^I' fzf_completion
  # zstyle ':completion:*' fzf-search-display true
fi

string="zsh-users/zsh-autosuggestions"
if [[ $antidote_list =~ $string ]]; then
  bindkey '^J' autosuggest-accept # ctrl-l, hjk
fi

string="MichaelAquilina/zsh-you-should-use"
if [[ $antidote_list =~ $string ]]; then
  export YSU_MESSAGE_POSITION="after"
  export YSU_MODE=ALL
fi

unset antidote_list string
